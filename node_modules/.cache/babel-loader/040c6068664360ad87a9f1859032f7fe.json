{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState(null);\n  const [passwordToValidate, setPasswordToValidate] = useState(null);\n  const [errorArray, setErrorArray] = useState(null);\n  useEffect(() => {\n    runValidationRules();\n  }, [usernameToValidate, passwordToValidate]);\n  useEffect(() => {\n    setErrorArray(null);\n  }, []);\n\n  const addToErrorArray = string => {\n    setErrorArray(errorArray => [...errorArray, string]);\n  };\n\n  const pushValidationResultsToErrorArray = validationTestResults => {\n    setErrorArray(errorArray => [...errorArray].concat(validationTestResults));\n  };\n\n  const runValidationRules = () => {\n    // setErrorArray([]);\n    let validationTestResults = [];\n\n    if (!passwordToValidate) {\n      //   addToErrorArray(\"Password does not exist!\");\n      validationTestResults.push(\"Password does not exist!\");\n    }\n\n    if (!usernameToValidate) {\n      //   addToErrorArray(\"Username does not exist!\");\n      validationTestResults.push(\"Username does not exist!\");\n    }\n\n    if (passwordToValidate && passwordToValidate.length < 5) {\n      //   addToErrorArray(\"Password length less than 5 characters!\");\n      validationTestResults.push(\"Password length less than 5 characters!\");\n    }\n\n    pushValidationResultsToErrorArray(validationTestResults);\n  };\n\n  const validate = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n  };\n\n  return {\n    validate,\n    errorArray\n  };\n};\n\nexport default useValidation;","map":{"version":3,"sources":["/Users/basri/Development/code/timesaver-frontend/src/hooks/useValidation.js"],"names":["useState","useEffect","useValidation","usernameToValidate","setUsernameToValidate","passwordToValidate","setPasswordToValidate","errorArray","setErrorArray","runValidationRules","addToErrorArray","string","pushValidationResultsToErrorArray","validationTestResults","concat","push","length","validate","name","password"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CJ,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACN,kBAAD,EAAqBE,kBAArB,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAME,eAAe,GAAGC,MAAM,IAAI;AAChCH,IAAAA,aAAa,CAACD,UAAU,IAAI,CAAC,GAAGA,UAAJ,EAAgBI,MAAhB,CAAf,CAAb;AACD,GAFD;;AAIA,QAAMC,iCAAiC,GAAIC,qBAAD,IAA2B;AACjEL,IAAAA,aAAa,CAACD,UAAU,IAAG,CAAC,GAAGA,UAAJ,EAAgBO,MAAhB,CAAuBD,qBAAvB,CAAd,CAAb;AAEH,GAHD;;AAKA,QAAMJ,kBAAkB,GAAG,MAAM;AAC/B;AACA,QAAII,qBAAqB,GAAG,EAA5B;;AACA,QAAI,CAACR,kBAAL,EAAyB;AACvB;AACAQ,MAAAA,qBAAqB,CAACE,IAAtB,CAA2B,0BAA3B;AACD;;AACD,QAAI,CAACZ,kBAAL,EAAyB;AACvB;AACAU,MAAAA,qBAAqB,CAACE,IAAtB,CAA2B,0BAA3B;AACD;;AACD,QAAIV,kBAAkB,IAAIA,kBAAkB,CAACW,MAAnB,GAA4B,CAAtD,EAAyD;AACvD;AACAH,MAAAA,qBAAqB,CAACE,IAAtB,CAA2B,yCAA3B;AACD;;AACDH,IAAAA,iCAAiC,CAACC,qBAAD,CAAjC;AACD,GAhBD;;AAkBA,QAAMI,QAAQ,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACnCf,IAAAA,qBAAqB,CAACc,IAAD,CAArB;AACAZ,IAAAA,qBAAqB,CAACa,QAAD,CAArB;AACD,GAHD;;AAKA,SAAO;AAAEF,IAAAA,QAAF;AAAYV,IAAAA;AAAZ,GAAP;AACD,CA9CD;;AAgDA,eAAeL,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState(null);\n  const [passwordToValidate, setPasswordToValidate] = useState(null);\n  const [errorArray, setErrorArray] = useState(null);\n\n  useEffect(() => {\n    runValidationRules();\n  }, [usernameToValidate, passwordToValidate]);\n\n  useEffect(() => {\n    setErrorArray(null);\n  }, []);\n\n  const addToErrorArray = string => {\n    setErrorArray(errorArray => [...errorArray, string]);\n  };\n\n  const pushValidationResultsToErrorArray = (validationTestResults) => {\n      setErrorArray(errorArray=> [...errorArray].concat(validationTestResults)\n      )\n  }\n\n  const runValidationRules = () => {\n    // setErrorArray([]);\n    let validationTestResults = [];\n    if (!passwordToValidate) {\n      //   addToErrorArray(\"Password does not exist!\");\n      validationTestResults.push(\"Password does not exist!\");\n    }\n    if (!usernameToValidate) {\n      //   addToErrorArray(\"Username does not exist!\");\n      validationTestResults.push(\"Username does not exist!\");\n    }\n    if (passwordToValidate && passwordToValidate.length < 5) {\n      //   addToErrorArray(\"Password length less than 5 characters!\");\n      validationTestResults.push(\"Password length less than 5 characters!\");\n    }\n    pushValidationResultsToErrorArray(validationTestResults)\n  };\n\n  const validate = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n  };\n\n  return { validate, errorArray };\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}
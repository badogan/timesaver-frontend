{"ast":null,"code":"import { useState } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState();\n  const [passwordToValidate, setPasswordToValidate] = useState();\n  const [validationStatus, setValidationStatus] = useState(false);\n  const [validationResultsArray, setValidationResultsArray] = useState([]);\n  const [errorArray, setErrorArray] = useState([]);\n\n  const initiateValidation = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n    runValidationRules();\n    return {};\n  };\n\n  const addToErrorArray = string => setErrorArray([...errorArray, string]);\n\n  const addToValidationResultsArray = boolean => setValidationResultsArray([...vaidation]);\n\n  const runValidationRules = () => {\n    if (!usernameToValidate) {\n      addToErrorArray(\"Username does not exist!\");\n    }\n\n    if (!passwordToValidate) {\n      setValidationStatus(false);\n      addToErrorArray(\"Password does not exist!\");\n    } else if (passwordToValidate.length < 5 && passwordToValidate) {\n      setValidationStatus(false);\n      addToErrorArray(\"Passoword length less than 5 characters!\");\n    } else {\n      setErrorArray([]);\n      setValidationStatus(true);\n    }\n  };\n\n  return {\n    validationStatus,\n    errorArray,\n    initiateValidation\n  };\n};\n\nexport default useValidation;","map":{"version":3,"sources":["/Users/basri/Development/code/timesaver-frontend/src/hooks/useValidation.js"],"names":["useState","useValidation","usernameToValidate","setUsernameToValidate","passwordToValidate","setPasswordToValidate","validationStatus","setValidationStatus","validationResultsArray","setValidationResultsArray","errorArray","setErrorArray","initiateValidation","name","password","runValidationRules","addToErrorArray","string","addToValidationResultsArray","boolean","vaidation","length"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CH,QAAQ,EAA5D;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,EAA5D;AACA,QAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACQ,sBAAD,EAAwBC,yBAAxB,IAAqDT,QAAQ,CAAC,EAAD,CAAnE;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMY,kBAAkB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC7CX,IAAAA,qBAAqB,CAACU,IAAD,CAArB;AACAR,IAAAA,qBAAqB,CAACS,QAAD,CAArB;AACAC,IAAAA,kBAAkB;AAClB,WAAO,EAAP;AACD,GALD;;AAOA,QAAMC,eAAe,GAAGC,MAAM,IAAIN,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgBO,MAAhB,CAAD,CAA/C;;AACA,QAAMC,2BAA2B,GAAGC,OAAO,IAAIV,yBAAyB,CAAC,CAAC,GAAGW,SAAJ,CAAD,CAAxE;;AAEA,QAAML,kBAAkB,GAAG,MAAM;AAC/B,QAAI,CAACb,kBAAL,EAAyB;AAEvBc,MAAAA,eAAe,CAAC,0BAAD,CAAf;AACD;;AACD,QAAI,CAACZ,kBAAL,EAAyB;AACvBG,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAS,MAAAA,eAAe,CAAC,0BAAD,CAAf;AACD,KAHD,MAGO,IAAKZ,kBAAkB,CAACiB,MAAnB,GAA4B,CAA7B,IAAoCjB,kBAAxC,EAA4D;AACjEG,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAS,MAAAA,eAAe,CAAC,0CAAD,CAAf;AACD,KAHM,MAGA;AACLL,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAJ,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;AACF,GAfD;;AAiBA,SAAO;AAAED,IAAAA,gBAAF;AAAoBI,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AACD,CAnCD;;AAqCA,eAAeX,aAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState();\n  const [passwordToValidate, setPasswordToValidate] = useState();\n  const [validationStatus, setValidationStatus] = useState(false);\n  const [validationResultsArray,setValidationResultsArray] = useState([])\n  const [errorArray, setErrorArray] = useState([]);\n\n  const initiateValidation = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n    runValidationRules();\n    return {}\n  };\n\n  const addToErrorArray = string => setErrorArray([...errorArray, string]);\n  const addToValidationResultsArray = boolean => setValidationResultsArray([...vaidation])\n\n  const runValidationRules = () => {\n    if (!usernameToValidate) {\n\n      addToErrorArray(\"Username does not exist!\");\n    }\n    if (!passwordToValidate) {\n      setValidationStatus(false);\n      addToErrorArray(\"Password does not exist!\");\n    } else if ((passwordToValidate.length < 5) && (passwordToValidate)){\n      setValidationStatus(false);\n      addToErrorArray(\"Passoword length less than 5 characters!\");\n    } else {\n      setErrorArray([]);\n      setValidationStatus(true);\n    }\n  };\n\n  return { validationStatus, errorArray, initiateValidation };\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}
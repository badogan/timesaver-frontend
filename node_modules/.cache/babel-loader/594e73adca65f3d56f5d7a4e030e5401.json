{"ast":null,"code":"import { useState } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState();\n  const [passwordToValidate, setPasswordToValidate] = useState();\n  const [validationStatus, setValidationStatus] = useState(false);\n  const [validationResultsArray, setValidationResultsArray] = useState([]);\n  const [errorArray, setErrorArray] = useState([]);\n\n  const initiateValidation = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n    runValidationRules();\n    return {};\n  };\n\n  const addToErrorArray = string => setErrorArray([...errorArray, string]);\n\n  const addToValidationResultsArray = boolean => setValidationResultsArray([...validationResultsArray, boolean]);\n\n  const runValidationRules = () => {\n    if (!usernameToValidate) {\n      addToValidationResultsArray(false);\n      addToErrorArray(\"Username does not exist!\");\n    } else {\n      addToValidationResultsArray(true);\n    }\n\n    if (!passwordToValidate) {\n      addToValidationResultsArray(false);\n      addToErrorArray(\"Password does not exist!\");\n    }\n\n    {\n      addToValidationResultsArray(true);\n    }\n\n    if (passwordToValidate.length < 5 && passwordToValidate) {\n      addToValidationResultsArray(false);\n      addToErrorArray(\"Passoword length less than 5 characters!\");\n    }\n\n    setValidationStatus(validationResultsArray.reduce((sum, num) => sum || num));\n  };\n\n  return {\n    validationStatus,\n    errorArray,\n    initiateValidation\n  };\n};\n\nexport default useValidation;","map":{"version":3,"sources":["/Users/basri/Development/code/timesaver-frontend/src/hooks/useValidation.js"],"names":["useState","useValidation","usernameToValidate","setUsernameToValidate","passwordToValidate","setPasswordToValidate","validationStatus","setValidationStatus","validationResultsArray","setValidationResultsArray","errorArray","setErrorArray","initiateValidation","name","password","runValidationRules","addToErrorArray","string","addToValidationResultsArray","boolean","length","reduce","sum","num"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CH,QAAQ,EAA5D;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,EAA5D;AACA,QAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACQ,sBAAD,EAAyBC,yBAAzB,IAAsDT,QAAQ,CAAC,EAAD,CAApE;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMY,kBAAkB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC7CX,IAAAA,qBAAqB,CAACU,IAAD,CAArB;AACAR,IAAAA,qBAAqB,CAACS,QAAD,CAArB;AACAC,IAAAA,kBAAkB;AAClB,WAAO,EAAP;AACD,GALD;;AAOA,QAAMC,eAAe,GAAGC,MAAM,IAAIN,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgBO,MAAhB,CAAD,CAA/C;;AACA,QAAMC,2BAA2B,GAAGC,OAAO,IACzCV,yBAAyB,CAAC,CAAC,GAAGD,sBAAJ,EAA4BW,OAA5B,CAAD,CAD3B;;AAGA,QAAMJ,kBAAkB,GAAG,MAAM;AAC/B,QAAI,CAACb,kBAAL,EAAyB;AACrBgB,MAAAA,2BAA2B,CAAC,KAAD,CAA3B;AACAF,MAAAA,eAAe,CAAC,0BAAD,CAAf;AACH,KAHD,MAGO;AAACE,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AAAkC;;AAC1C,QAAI,CAACd,kBAAL,EAAyB;AACrBc,MAAAA,2BAA2B,CAAC,KAAD,CAA3B;AACAF,MAAAA,eAAe,CAAC,0BAAD,CAAf;AACH;;AAAC;AAACE,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AAAkC;;AACrC,QAAId,kBAAkB,CAACgB,MAAnB,GAA4B,CAA5B,IAAiChB,kBAArC,EAAyD;AACrDc,MAAAA,2BAA2B,CAAC,KAAD,CAA3B;AACAF,MAAAA,eAAe,CAAC,0CAAD,CAAf;AACH;;AACDT,IAAAA,mBAAmB,CAACC,sBAAsB,CAACa,MAAvB,CAA8B,CAACC,GAAD,EAAKC,GAAL,KAAWD,GAAG,IAAIC,GAAhD,CAAD,CAAnB;AACD,GAdD;;AAgBA,SAAO;AAAEjB,IAAAA,gBAAF;AAAoBI,IAAAA,UAApB;AAAgCE,IAAAA;AAAhC,GAAP;AACD,CAnCD;;AAqCA,eAAeX,aAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState();\n  const [passwordToValidate, setPasswordToValidate] = useState();\n  const [validationStatus, setValidationStatus] = useState(false);\n  const [validationResultsArray, setValidationResultsArray] = useState([]);\n  const [errorArray, setErrorArray] = useState([]);\n\n  const initiateValidation = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n    runValidationRules();\n    return {};\n  };\n\n  const addToErrorArray = string => setErrorArray([...errorArray, string]);\n  const addToValidationResultsArray = boolean =>\n    setValidationResultsArray([...validationResultsArray, boolean]);\n\n  const runValidationRules = () => {\n    if (!usernameToValidate) {\n        addToValidationResultsArray(false)\n        addToErrorArray(\"Username does not exist!\");\n    } else {addToValidationResultsArray(true)}\n    if (!passwordToValidate) {\n        addToValidationResultsArray(false)\n        addToErrorArray(\"Password does not exist!\");\n    } {addToValidationResultsArray(true)}\n    if (passwordToValidate.length < 5 && passwordToValidate) {\n        addToValidationResultsArray(false)\n        addToErrorArray(\"Passoword length less than 5 characters!\");\n    }\n    setValidationStatus(validationResultsArray.reduce((sum,num)=>sum || num))\n  };\n\n  return { validationStatus, errorArray, initiateValidation };\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}
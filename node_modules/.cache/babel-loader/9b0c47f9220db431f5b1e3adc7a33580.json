{"ast":null,"code":"import { useState, useEffect } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState(null);\n  const [passwordToValidate, setPasswordToValidate] = useState(null);\n  const [errorArray, setErrorArray] = useState([]);\n  useEffect(() => {\n    runValidationRules();\n  }, [usernameToValidate, passwordToValidate]);\n  useEffect(() => {\n    setErrorArray([]);\n  }, []);\n\n  const addToErrorArray = string => {\n    setErrorArray(errorArray => [...errorArray, string]);\n  };\n\n  const runValidationRules = () => {\n    setErrorArray([]);\n    let validationTestResults = [];\n\n    if (!passwordToValidate) {\n      //   addToErrorArray(\"Password does not exist!\");\n      validationTestResults.push(\"Password does not exist!\");\n    }\n\n    if (!usernameToValidate) {\n      //   addToErrorArray(\"Username does not exist!\");\n      validationTestResults.push(\"Username does not exist!\");\n    }\n\n    if (passwordToValidate && passwordToValidate.length < 5) {\n      //   addToErrorArray(\"Password length less than 5 characters!\");\n      validationTestResults.push(\"Password length less than 5 characters!\");\n    }\n  };\n\n  const validate = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n  };\n\n  return {\n    validate,\n    errorArray\n  };\n};\n\nexport default useValidation;","map":{"version":3,"sources":["/Users/basri/Development/code/timesaver-frontend/src/hooks/useValidation.js"],"names":["useState","useEffect","useValidation","usernameToValidate","setUsernameToValidate","passwordToValidate","setPasswordToValidate","errorArray","setErrorArray","runValidationRules","addToErrorArray","string","validationTestResults","push","length","validate","name","password"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CJ,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,kBAAkB;AACnB,GAFQ,EAEN,CAACN,kBAAD,EAAqBE,kBAArB,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAME,eAAe,GAAGC,MAAM,IAAI;AAChCH,IAAAA,aAAa,CAACD,UAAU,IAAI,CAAC,GAAGA,UAAJ,EAAgBI,MAAhB,CAAf,CAAb;AACD,GAFD;;AAIA,QAAMF,kBAAkB,GAAG,MAAM;AAC7BD,IAAAA,aAAa,CAAC,EAAD,CAAb;AACA,QAAII,qBAAqB,GAAG,EAA5B;;AACF,QAAI,CAACP,kBAAL,EAAyB;AACzB;AACAO,MAAAA,qBAAqB,CAACC,IAAtB,CAA2B,0BAA3B;AACC;;AACD,QAAI,CAACV,kBAAL,EAAyB;AACzB;AACES,MAAAA,qBAAqB,CAACC,IAAtB,CAA2B,0BAA3B;AACD;;AACD,QAAIR,kBAAkB,IAAIA,kBAAkB,CAACS,MAAnB,GAA4B,CAAtD,EAAyD;AACzD;AACAF,MAAAA,qBAAqB,CAACC,IAAtB,CAA2B,yCAA3B;AACC;AAEF,GAhBD;;AAkBA,QAAME,QAAQ,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACnCb,IAAAA,qBAAqB,CAACY,IAAD,CAArB;AACAV,IAAAA,qBAAqB,CAACW,QAAD,CAArB;AACD,GAHD;;AAKA,SAAO;AAAEF,IAAAA,QAAF;AAAYR,IAAAA;AAAZ,GAAP;AACD,CAzCD;;AA2CA,eAAeL,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useValidation = () => {\n  const [usernameToValidate, setUsernameToValidate] = useState(null);\n  const [passwordToValidate, setPasswordToValidate] = useState(null);\n  const [errorArray, setErrorArray] = useState([]);\n\n  useEffect(() => {\n    runValidationRules();\n  }, [usernameToValidate, passwordToValidate]);\n\n  useEffect(() => {\n    setErrorArray([])\n  }, []);\n\n  const addToErrorArray = string => {\n    setErrorArray(errorArray => [...errorArray, string]);\n  };\n\n  const runValidationRules = () => {\n      setErrorArray([])\n      let validationTestResults = []\n    if (!passwordToValidate) {\n    //   addToErrorArray(\"Password does not exist!\");\n    validationTestResults.push(\"Password does not exist!\")\n    }\n    if (!usernameToValidate) {\n    //   addToErrorArray(\"Username does not exist!\");\n      validationTestResults.push(\"Username does not exist!\")\n    }\n    if (passwordToValidate && passwordToValidate.length < 5) {\n    //   addToErrorArray(\"Password length less than 5 characters!\");\n    validationTestResults.push(\"Password length less than 5 characters!\")\n    }\n    \n  };\n\n  const validate = (name, password) => {\n    setUsernameToValidate(name);\n    setPasswordToValidate(password);\n  };\n\n  return { validate, errorArray };\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}